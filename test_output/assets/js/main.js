// Enhanced JavaScript for Lapis Theme class SiteNavigation { constructor() { this.mobileMenuToggle = document.querySelector('.mobile-menu-toggle'); this.sidebar = document.querySelector('.site-sidebar'); this.themeToggle = document.querySelector('.theme-toggle'); this.themeIcon = document.querySelector('.theme-icon'); this.init(); } init() { this.setupMobileMenu(); this.setupThemeToggle(); this.setupSmoothScrolling(); this.setupActiveNavigation(); } setupMobileMenu() { if (this.mobileMenuToggle && this.sidebar) { this.mobileMenuToggle.addEventListener('click', () => { this.toggleMobileMenu(); }); // Close mobile menu when clicking outside document.addEventListener('click', (e) => { if (this.sidebar && this.sidebar.classList.contains('open')) { if (!this.sidebar.contains(e.target) && !this.mobileMenuToggle.contains(e.target)) { this.closeMobileMenu(); } } }); // Close mobile menu on escape key document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && this.sidebar && this.sidebar.classList.contains('open')) { this.closeMobileMenu(); } }); } } toggleMobileMenu() { if (this.sidebar) { this.sidebar.classList.toggle('open'); this.mobileMenuToggle.classList.toggle('active'); // Prevent body scroll when menu is open if (this.sidebar.classList.contains('open')) { document.body.style.overflow = 'hidden'; } else { document.body.style.overflow = ''; } } } closeMobileMenu() { if (this.sidebar) { this.sidebar.classList.remove('open'); this.mobileMenuToggle.classList.remove('active'); document.body.style.overflow = ''; } } setupThemeToggle() { if (this.themeToggle && this.themeIcon) { // Load saved theme preference const savedTheme = localStorage.getItem('theme'); if (savedTheme) { document.documentElement.setAttribute('data-theme', savedTheme); this.updateThemeIcon(savedTheme); } this.themeToggle.addEventListener('click', () => { this.toggleTheme(); }); } } toggleTheme() { const currentTheme = document.documentElement.getAttribute('data-theme'); const newTheme = currentTheme === 'dark' ? 'light' : 'dark'; document.documentElement.setAttribute('data-theme', newTheme); localStorage.setItem('theme', newTheme); this.updateThemeIcon(newTheme); } updateThemeIcon(theme) { if (this.themeIcon) { this.themeIcon.textContent = theme === 'dark' ? '☀️' : '🌙'; } } setupSmoothScrolling() { // Smooth scrolling for anchor links document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', function (e) { e.preventDefault(); const target = document.querySelector(this.getAttribute('href')); if (target) { target.scrollIntoView({ behavior: 'smooth', block: 'start' }); } }); }); } setupActiveNavigation() { // Update active navigation based on current page const currentPath = window.location.pathname; const navLinks = document.querySelectorAll('.nav-link, .sidebar-link'); navLinks.forEach(link => { const href = link.getAttribute('href'); if (href === currentPath || (currentPath.startsWith(href) && href !== '/')) { link.classList.add('active'); } else { link.classList.remove('active'); } }); } } // Table of Contents functionality class TableOfContents { constructor() { this.tocNav = document.querySelector('.toc-nav'); this.headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6'); this.init(); } init() { if (this.tocNav && this.headings.length > 0) { this.generateTOC(); this.setupScrollSpy(); } } generateTOC() { const tocList = document.createElement('ul'); this.headings.forEach((heading, index) => { const id = heading.id || `heading-${index}`; heading.id = id; const listItem = document.createElement('li'); const link = document.createElement('a'); link.href = `#${id}`; link.textContent = heading.textContent; link.className = `toc-level-${heading.tagName.toLowerCase()}`; listItem.appendChild(link); tocList.appendChild(listItem); }); this.tocNav.appendChild(tocList); } setupScrollSpy() { const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const id = entry.target.id; const activeLink = this.tocNav.querySelector(`a[href="#${id}"]`); // Remove active class from all links this.tocNav.querySelectorAll('a').forEach(link => { link.classList.remove('active'); }); // Add active class to current link if (activeLink) { activeLink.classList.add('active'); } } }); }, { rootMargin: '-20% 0px -80% 0px' }); this.headings.forEach(heading => { observer.observe(heading); }); } } // Enhanced alert functionality class AlertEnhancements { constructor() { this.alerts = document.querySelectorAll('.alert'); this.init(); } init() { this.alerts.forEach(alert => { this.addCloseButton(alert); }); } addCloseButton(alert) { const closeButton = document.createElement('button'); closeButton.className = 'alert-close'; closeButton.innerHTML = '×'; closeButton.setAttribute('aria-label', 'Close alert'); closeButton.addEventListener('click', () => { alert.style.opacity = '0'; alert.style.transform = 'translateY(-10px)'; setTimeout(() => { alert.remove(); }, 300); }); alert.appendChild(closeButton); } } // Code highlighting enhancements class CodeEnhancements { constructor() { this.codeBlocks = document.querySelectorAll('pre code'); this.init(); } init() { this.codeBlocks.forEach(block => { this.addCopyButton(block); }); } addCopyButton(block) { const copyButton = document.createElement('button'); copyButton.className = 'code-copy'; copyButton.innerHTML = '📋'; copyButton.setAttribute('aria-label', 'Copy code'); copyButton.title = 'Copy code'; copyButton.addEventListener('click', async () => { try { await navigator.clipboard.writeText(block.textContent); copyButton.innerHTML = '✅'; copyButton.style.background = '#48bb78'; setTimeout(() => { copyButton.innerHTML = '📋'; copyButton.style.background = ''; }, 2000); } catch (err) { console.error('Failed to copy code:', err); } }); const pre = block.parentElement; pre.style.position = 'relative'; pre.appendChild(copyButton); } } // Initialize everything when DOM is ready document.addEventListener('DOMContentLoaded', () => { new SiteNavigation(); new TableOfContents(); new AlertEnhancements(); new CodeEnhancements(); }); // Add CSS for JavaScript enhancements const style = document.createElement('style'); style.textContent = ` .alert-close { position: absolute; top: 0.5rem; right: 0.5rem; background: none; border: none; font-size: 1.2rem; cursor: pointer; opacity: 0.7; transition: opacity 0.2s; } .alert-close:hover { opacity: 1; } .code-copy { position: absolute; top: 0.5rem; right: 0.5rem; background: rgba(0, 0, 0, 0.1); border: none; border-radius: 4px; padding: 0.25rem 0.5rem; cursor: pointer; font-size: 0.8rem; transition: background 0.2s; } .code-copy:hover { background: rgba(0, 0, 0, 0.2); } .toc-nav a.active { background: var(--primary-color); color: white; } .mobile-menu-toggle.active .hamburger-line:nth-child(1) { transform: rotate(45deg) translate(5px, 5px); } .mobile-menu-toggle.active .hamburger-line:nth-child(2) { opacity: 0; } .mobile-menu-toggle.active .hamburger-line:nth-child(3) { transform: rotate(-45deg) translate(7px, -6px); } `; document.head.appendChild(style);